// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace GhanbodeEbieredeFinalProject.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using GhanbodeEbieredeFinalProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\_Imports.razor"
using GhanbodeEbieredeFinalProject.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Todo")]
    public partial class Todo : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 42 "c:\Users\W0835765\Documents\GitHub\WEB315_Assignment\GhanbodeEbieredeFinalProject\Pages\Todo.razor"
 
    private List<TaskItem> tasks = new();
    private string newTaskTitle;
    private string newTaskDescription;
    private DateTime newTaskDueDate;
    private string errorMessage;

    private void AddTask()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newTaskTitle) || string.IsNullOrWhiteSpace(newTaskDescription))
            {
                errorMessage = "Task title and description are required.";
                return;
            }

            var newTask = new TaskItem { Title = newTaskTitle, Description = newTaskDescription, DueDate = newTaskDueDate };

            // Check if the task already exists with the same title
            if (tasks.Any(t => t.Title == newTask.Title))
            {
                errorMessage = "A task with the same title already exists.";
                return;
            }

            tasks.Add(newTask);
            newTaskTitle = "";
            newTaskDescription = "";
            newTaskDueDate = DateTime.Today;

            errorMessage = ""; // Clear any previous error messages on successful task addition
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while adding the task: " + ex.Message;
        }
    }

    private void AddSubTask(TaskItem parentTask)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newTaskTitle) || string.IsNullOrWhiteSpace(newTaskDescription))
            {
                errorMessage = "Task title and description are required.";
                return;
            }

            if (parentTask.SubTasks == null)
                parentTask.SubTasks = new List<SubTaskItem>();

            var newSubTask = new SubTaskItem { Title = newTaskTitle, Description = newTaskDescription, DueDate = newTaskDueDate };

            // Check if the subtask already exists with the same title
            if (parentTask.SubTasks.Any(st => st.Title == newSubTask.Title))
            {
                errorMessage = "A subtask with the same title already exists.";
                return;
            }

            parentTask.SubTasks.Add(newSubTask);
            newTaskTitle = "";
            newTaskDescription = "";
            newTaskDueDate = DateTime.Today;

            errorMessage = ""; // Clear any previous error messages on successful subtask addition
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while adding the subtask: " + ex.Message;
        }
    }

    private void UpdateTaskStatus(TaskItem task)
    {
        task.IsDone = !task.IsDone;
    }

    private void UpdateSubTaskStatus(TaskItem parentTask, SubTaskItem subTask)
    {
        subTask.IsDone = !subTask.IsDone;
        UpdateParentTaskStatus(parentTask);
    }

    private void UpdateParentTaskStatus(TaskItem task)
    {
        if (task.SubTasks != null && task.SubTasks.Count > 0)
        {
            task.IsDone = task.SubTasks.All(subTask => subTask.IsDone);
        }
    }

    private void DeleteTask(TaskItem task)
    {
        tasks.Remove(task);
    }

    private void DeleteSubTask(TaskItem parentTask, SubTaskItem subTask)
    {
        parentTask.SubTasks.Remove(subTask);
        UpdateParentTaskStatus(parentTask);
    }

    private int GetIncompleteTaskCount()
    {
        return tasks.Count(task => !task.IsDone);
    }

    public class TaskItem
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime DueDate { get; set; }
        public bool IsDone { get; set; }
        public List<SubTaskItem> SubTasks { get; set; }
    }

    public class SubTaskItem
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime DueDate { get; set; }
        public bool IsDone { get; set; }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
